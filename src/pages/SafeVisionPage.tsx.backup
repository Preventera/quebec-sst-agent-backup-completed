import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Play, 
  Video, 
  Users, 
  Clock, 
  CheckCircle, 
  AlertTriangle,
  Settings,
  FileText,
  Zap,
  Bot,
  Target
} from 'lucide-react';

const SafeVisionPage = () => {
  const [selectedScenario, setSelectedScenario] = useState(52);
  const [isOrchestrating, setIsOrchestrating] = useState(false);
  const [orchestrationProgress, setOrchestrationProgress] = useState(0);
  const [currentPhase, setCurrentPhase] = useState('');
  const [generatedScript, setGeneratedScript] = useState('');
  
  const scenarios = {
    52: {
      title: "Capsules vidéo obligations LMRSST",
      description: "Formation interactive obligations légales employeurs selon LMRSST Art.51",
      agents: ["Hugo", "DiagSST", "ALSS", "LexiNorm"],
      estimatedDuration: "3-5min",
      complexity: "medium",
      priority: "critical"
    },
    116: {
      title: "Comité SST chantier temporaire",
      description: "Guide mise en place comité SST selon CSTC pour chantiers construction temporaires",
      agents: ["CoSS", "DiagSST", "LexiNorm", "Hugo"],
      estimatedDuration: "2-3min",
      complexity: "high",
      priority: "high"
    }
  };

  const agents = [
    { name: 'Hugo', icon: Bot, phase: 'analysis', status: 'ready', role: 'Orchestrateur central' },
    { name: 'DiagSST', icon: AlertTriangle, phase: 'analysis', status: 'ready', role: 'Analyse conformité' },
    { name: 'Sentinelle', icon: Target, phase: 'analysis', status: 'ready', role: 'Détection risques' },
    { name: 'LexiNorm', icon: FileText, phase: 'content', status: 'ready', role: 'Validation réglementaire' },
    { name: 'ALSS', icon: Users, phase: 'content', status: 'ready', role: 'Conception pédagogique' },
    { name: 'Prioris', icon: Zap, phase: 'content', status: 'ready', role: 'Stratégie contenu' },
    { name: 'DocuGen', icon: FileText, phase: 'generation', status: 'ready', role: 'Génération script' },
    { name: 'CoSS', icon: Users, phase: 'validation', status: 'ready', role: 'Engagement utilisateur' }
  ];

  const [agentStates, setAgentStates] = useState(agents);

  const simulateOrchestration = async () => {
    setIsOrchestrating(true);
    setOrchestrationProgress(0);
    setGeneratedScript('');
    
    const phases = ['analysis', 'content', 'generation', 'validation'];
    let progress = 0;
    
    for (let phaseIndex = 0; phaseIndex < phases.length; phaseIndex++) {
      const phase = phases[phaseIndex];
      setCurrentPhase(phase);
      
      const phaseAgents = agentStates.filter(a => a.phase === phase);
      
      for (let agentIndex = 0; agentIndex < phaseAgents.length; agentIndex++) {
        const agent = phaseAgents[agentIndex];
        
        // Marquer l'agent comme en cours
        setAgentStates(prev => prev.map(a => 
          a.name === agent.name 
            ? { ...a, status: 'working' }
            : a
        ));
        
        // Simulation du travail (2-4 secondes)
        await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 2000));
        
        // Marquer comme terminé
        setAgentStates(prev => prev.map(a => 
          a.name === agent.name 
            ? { ...a, status: 'complete' }
            : a
        ));
        
        progress += (100 / 8); // 8 agents au total
        setOrchestrationProgress(Math.round(progress));
      }
    }
    
    // Génération du script final
    setTimeout(() => {
      const mockScript = generateMockScript(selectedScenario);
      setGeneratedScript(mockScript);
      setIsOrchestrating(false);
      setCurrentPhase('completed');
    }, 1000);
  };

  const generateMockScript = (scenarioId: number): string => {
    const scenario = scenarios[scenarioId];
    return `# Script SafeVision - ${scenario.title}

## Métadonnées Production
- **Format**: Micro-learning interactif
- **Durée**: ${scenario.estimatedDuration}
- **Audience**: Employeurs et responsables SST
- **Complexité**: ${scenario.complexity}

## Introduction (0:00-0:30)
**NARRATEUR**: "Au Québec, la Loi sur la santé et la sécurité du travail impose des obligations précises aux employeurs..."

**VISUEL**: Logo CNESST + Statistiques accidents de travail 2024

## Développement (0:30-2:30)
**NARRATEUR**: "L'article 51 de la LMRSST stipule que l'employeur doit..."

**VISUEL**: Animation des 8 obligations principales
- Formation des travailleurs ✓
- Fourniture d'équipements de protection ✓
- Mise en place de comité SST (si +20 employés) ✓

## Points d'Interaction (2:30-3:00)
**QUIZ INTERACTIF**: "Votre entreprise compte 45 employés. Êtes-vous obligé d'avoir un comité SST?"
- A) Oui, selon l'art. 51 LMRSST ✓
- B) Non, c'est optionnel
- C) Seulement si accidents fréquents

## Conclusion (3:00-3:30)
**NARRATEUR**: "AgenticSST Québec vous accompagne dans cette démarche de conformité..."

**VISUEL**: Call-to-action + Contact information

---
**Généré par**: AgenticSST Québec - SafeVision Integration
**Agents contributeurs**: ${scenario.agents.join(', ')}
**Confiance moyenne**: 94%
**Production-ready**: ✅ Oui`;
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'working': 
        return <div className="animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full" />;
      case 'complete': 
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      default: 
        return <div className="h-4 w-4 bg-gray-300 rounded-full" />;
    }
  };

  const getPhaseColor = (phase: string) => {
    switch (phase) {
      case 'analysis': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'content': return 'bg-green-100 text-green-800 border-green-200';
      case 'generation': return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'validation': return 'bg-orange-100 text-orange-800 border-orange-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
            <Video className="h-8 w-8 text-blue-600" />
            SafeVision Integration
          </h1>
          <p className="text-gray-600 mt-2">
            Génération automatique de contenu vidéo SST via orchestration multi-agents
          </p>
        </div>
        
        <div className="flex items-center gap-3">
          <Badge variant="secondary" className="flex items-center gap-2">
            <Bot className="h-4 w-4" />
            8 Agents Actifs
          </Badge>
          <Badge variant="secondary" className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            196 Docs CNESST
          </Badge>
        </div>
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
        {/* Configuration */}
        <div className="xl:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Configuration SafeVision
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Scénario</label>
                <select 
                  value={selectedScenario}
                  onChange={(e) => setSelectedScenario(parseInt(e.target.value))}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  {Object.entries(scenarios).map(([id, scenario]) => (
                    <option key={id} value={id}>
                      Scénario #{id} - {scenario.title}
                    </option>
                  ))}
                </select>
              </div>

              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-medium text-blue-900 mb-2">Scénario sélectionné</h4>
                <p className="text-sm text-blue-700 mb-3">
                  {scenarios[selectedScenario].description}
                </p>
                <div className="flex flex-wrap gap-2 mb-3">
                  {scenarios[selectedScenario].agents.map(agent => (
                    <Badge key={agent} variant="secondary" className="text-xs">
                      {agent}
                    </Badge>
                  ))}
                </div>
                <div className="flex items-center justify-between text-xs text-blue-600">
                  <span>Durée: {scenarios[selectedScenario].estimatedDuration}</span>
                  <span>Complexité: {scenarios[selectedScenario].complexity}</span>
                </div>
              </div>

              <Button
                onClick={simulateOrchestration}
                disabled={isOrchestrating}
                className="w-full"
                size="lg"
              >
                {isOrchestrating ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                    Orchestration en cours... ({orchestrationProgress}%)
                  </>
                ) : (
                  <>
                    <Play className="h-4 w-4 mr-2" />
                    Démarrer Orchestration SafeVision
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Orchestration Status */}
        <div className="xl:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bot className="h-5 w-5" />
                Pipeline Multi-Agents SafeVision
              </CardTitle>
              {currentPhase && (
                <Badge className={`w-fit ${getPhaseColor(currentPhase)}`}>
                  Phase active: {currentPhase}
                </Badge>
              )}
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                {agentStates.map((agent) => (
                  <div key={agent.name} className="bg-gray-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <agent.icon className="h-4 w-4 text-gray-600" />
                        <span className="font-medium text-sm">{agent.name}</span>
                      </div>
                      {getStatusIcon(agent.status)}
                    </div>
                    
                    <div className={`text-xs px-2 py-1 rounded-full mb-2 border ${getPhaseColor(agent.phase)}`}>
                      {agent.phase}
                    </div>
                    
                    <p className="text-xs text-gray-600">{agent.role}</p>
                  </div>
                ))}
              </div>

              {isOrchestrating && (
                <div className="mt-6">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">Progression globale</span>
                    <span className="text-sm text-gray-600">{orchestrationProgress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full transition-all duration-500" 
                      style={{ width: `${orchestrationProgress}%` }}
                    ></div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Script généré */}
      {generatedScript && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Script SafeVision Généré
              </div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Video className="h-4 w-4 mr-2" />
                  Envoyer à Synthesia
                </Button>
                <Button variant="outline" size="sm">
                  Télécharger Script
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-50 rounded-lg p-4 border">
              <pre className="text-sm text-gray-800 whitespace-pre-wrap font-mono">
                {generatedScript}
              </pre>
            </div>
            
            <Alert className="mt-4 border-green-200 bg-green-50">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-800">
                <strong>Script production-ready généré avec succès !</strong><br />
                Compatible Synthesia • Confiance: 94% • Agents: {scenarios[selectedScenario].agents.length} contributeurs
              </AlertDescription>
            </Alert>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SafeVisionPage;