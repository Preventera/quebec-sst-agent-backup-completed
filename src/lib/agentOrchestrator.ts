// Migration du syst√®me d'orchestration agents vers LLM Gateway
// src/lib/agentOrchestrator.ts

import { llmClient } from '@/lib/llmClient';
import orchestrationPrompts from '@/data/orchestrationPrompts.json';

interface AgentCapabilities {
  Hugo: 'Orchestration principale, coordination multi-agents';
  DiagSST: 'Diagnostic conformit√©, √©valuation risques';
  LexiNorm: 'R√©f√©rences l√©gales LMRSST, analyse r√©glementaire';
  Prioris: 'Priorisation actions, planification';
  DocuGen: 'G√©n√©ration documents, rapports';
  ALSS: 'Formation, apprentissage, liaison SST';
  Sentinelle: 'Surveillance continue, alertes';
  CoSS: 'Comit√© SST virtuel, consultation';
}

type AgentType = keyof AgentCapabilities;

interface OrchestrationContext {
  scenarioId: number;
  userContext: string;
  companyProfile?: {
    size: number;
    sector: string;
    riskLevel: 'low' | 'medium' | 'high' | 'critical';
  };
  userId: string;
}

interface AgentResponse {
  agentName: AgentType;
  content: string;
  confidence: number;
  sources: string[];
  nextActions?: string[];
  handoffTo?: AgentType;
}

// Prompts syst√®me sp√©cialis√©s pour chaque agent
const AGENT_SYSTEM_PROMPTS: Record<AgentType, string> = {
  Hugo: `Tu es Hugo, l'orchestrateur principal d'AgenticSST Qu√©bec. 
Tu coordonnes les autres agents sp√©cialis√©s selon la LMRSST. 
Tu analyses le contexte global et diriges l'orchestration multi-agents.
Sois concis, strat√©gique et orient√© solutions.`,

  DiagSST: `Tu es DiagSST, l'expert diagnostic de conformit√© SST.
Tu √©values la conformit√© LMRSST, identifies les lacunes et risques.
Tu fournis des diagnostics pr√©cis avec r√©f√©rences r√©glementaires.
Base tes analyses sur les articles 88-102 LMRSST.`,

  LexiNorm: `Tu es LexiNorm, le sp√©cialiste des r√©f√©rences l√©gales SST.
Tu connais parfaitement la LMRSST, RSST, et jurisprudence CNESST.
Tu fournis les r√©f√©rences exactes et interpr√©tations r√©glementaires.
Cite toujours les articles et num√©ros de r√®glement pr√©cis.`,

  Prioris: `Tu es Prioris, l'expert en priorisation et planification SST.
Tu priorises les actions selon l'impact risque et conformit√© LMRSST.
Tu cr√©√©s des plans d'action hi√©rarchis√©s avec √©ch√©anciers r√©alistes.
Focus sur l'efficacit√© op√©rationnelle et ROI s√©curitaire.`,

  DocuGen: `Tu es DocuGen, le g√©n√©rateur de documents SST conformes.
Tu produis des documents structur√©s selon les standards LMRSST.
Tu g√©n√®res proc√©dures, politiques, rapports avec format professionnel.
Assure la tra√ßabilit√© et conformit√© documentaire.`,

  ALSS: `Tu es ALSS, l'agent de liaison et formation SST.
Tu con√ßois des programmes de formation LMRSST adapt√©s.
Tu facilites la communication entre parties prenantes.
Focus sur p√©dagogie, engagement et appropriation.`,

  Sentinelle: `Tu es Sentinelle, le syst√®me de surveillance proactive SST.
Tu d√©tectes les non-conformit√©s et situations √† risque.
Tu g√©n√®res des alertes pr√©ventives bas√©es sur indicateurs.
Surveillance continue, r√©activit√©, pr√©vention.`,

  CoSS: `Tu es CoSS, le Comit√© SST Virtuel.
Tu repr√©sentes la perspective participative des travailleurs.
Tu √©values l'acceptabilit√© sociale des mesures SST.
Balance conformit√© technique et r√©alit√© terrain.`
};

class AgentOrchestrator {
  private activeAgents: Set<AgentType> = new Set();
  private orchestrationHistory: AgentResponse[] = [];

  // Ex√©cuter un sc√©nario d'orchestration sp√©cifique
  async executeOrchestrationScenario(
    scenarioId: number, 
    context: OrchestrationContext
  ): Promise<AgentResponse[]> {
    const scenario = orchestrationPrompts.find(s => s.id === scenarioId);
    if (!scenario) {
      throw new Error(`Sc√©nario ${scenarioId} non trouv√©`);
    }

    console.log(`üöÄ Ex√©cution orchestration: ${scenario.title}`);
    this.orchestrationHistory = [];
    
    const responses: AgentResponse[] = [];

    // Ex√©cuter chaque agent du sc√©nario en s√©quence
    for (const agentName of scenario.agents) {
      try {
        const response = await this.executeAgent(
          agentName as AgentType,
          scenario.orchestration_prompt,
          context,
          responses // Historique pour contexte
        );
        
        responses.push(response);
        this.orchestrationHistory.push(response);
        
        // Log pour audit
        await this.logAgentExecution(response, scenario, context);
        
      } catch (error) {
        console.error(`‚ùå Erreur agent ${agentName}:`, error);
        // Continuer avec les autres agents m√™me si un √©choue
      }
    }

    return responses;
  }

  // Ex√©cuter un agent individuel
  async executeAgent(
    agentName: AgentType,
    orchestrationPrompt: string,
    context: OrchestrationContext,
    previousResponses: AgentResponse[] = []
  ): Promise<AgentResponse> {
    
    // Construire le contexte enrichi pour l'agent
    const agentContext = this.buildAgentContext(
      agentName, 
      orchestrationPrompt, 
      context, 
      previousResponses
    );

    // Appel s√©curis√© via LLM Gateway
    const llmResponse = await llmClient.agentChat(
      agentName,
      agentContext,
      AGENT_SYSTEM_PROMPTS[agentName],
      {
        provider: 'anthropic',
        model: 'claude-3-haiku-20240307',
        userId: context.userId
      }
    );

    // Structurer la r√©ponse de l'agent
    return {
      agentName,
      content: llmResponse.content,
      confidence: this.calculateConfidence(llmResponse),
      sources: [`Agent ${agentName}`, 'LMRSST Art. 88-102'],
      nextActions: this.extractNextActions(llmResponse.content),
      handoffTo: this.determineHandoff(agentName, llmResponse.content)
    };
  }

  // Construire le contexte enrichi pour l'agent
  private buildAgentContext(
    agentName: AgentType,
    orchestrationPrompt: string,
    context: OrchestrationContext,
    previousResponses: AgentResponse[]
  ): string {
    let agentContext = `MISSION: ${orchestrationPrompt}\n\n`;
    
    // Contexte utilisateur
    agentContext += `CONTEXTE UTILISATEUR: ${context.userContext}\n\n`;
    
    // Profil entreprise si disponible
    if (context.companyProfile) {
      agentContext += `PROFIL ENTREPRISE:
- Taille: ${context.companyProfile.size} employ√©s
- Secteur: ${context.companyProfile.sector}
- Niveau de risque: ${context.companyProfile.riskLevel}\n\n`;
    }
    
    // R√©ponses des agents pr√©c√©dents
    if (previousResponses.length > 0) {
      agentContext += `R√âPONSES AGENTS PR√âC√âDENTS:\n`;
      previousResponses.forEach(resp => {
        agentContext += `${resp.agentName}: ${resp.content.substring(0, 200)}...\n`;
      });
      agentContext += '\n';
    }
    
    // Instruction sp√©cifique selon l'agent
    agentContext += this.getAgentSpecificInstruction(agentName);
    
    return agentContext;
  }

  // Instructions sp√©cifiques par agent
  private getAgentSpecificInstruction(agentName: AgentType): string {
    const instructions = {
      Hugo: "En tant qu'orchestrateur, analyse la situation globalement et coordonne la r√©ponse multi-agents.",
      DiagSST: "Effectue un diagnostic complet de conformit√© LMRSST avec identification pr√©cise des lacunes.",
      LexiNorm: "Fournis les r√©f√©rences l√©gales exactes et interpr√©tations r√©glementaires applicables.",
      Prioris: "Priorise les actions selon l'urgence, impact et faisabilit√©. Cr√©e un plan d'action structur√©.",
      DocuGen: "G√©n√®re les documents n√©cessaires avec structure professionnelle et conformit√© LMRSST.",
      ALSS: "D√©veloppe les aspects formation et communication pour l'appropriation des mesures.",
      Sentinelle: "Identifie les indicateurs de surveillance et m√©canismes d'alerte pr√©ventive.",
      CoSS: "√âvalue l'acceptabilit√© sociale et la faisabilit√© terrain des mesures propos√©es."
    };
    
    return instructions[agentName];
  }

  // Calculer le niveau de confiance
  private calculateConfidence(llmResponse: any): number {
    // Logique simple bas√©e sur la longueur et usage de tokens
    const length = llmResponse.content.length;
    const tokenUsage = llmResponse.usage?.total_tokens || 0;
    
    if (length > 500 && tokenUsage > 100) return 94;
    if (length > 300 && tokenUsage > 50) return 87;
    return 75;
  }

  // Extraire les actions suivantes
  private extractNextActions(content: string): string[] {
    // Logique d'extraction des actions (regex, mots-cl√©s, etc.)
    const actionKeywords = ['recommande', 'propose', 'sugg√®re', 'doit', 'devrait'];
    const sentences = content.split(/[.!?]+/);
    
    return sentences
      .filter(s => actionKeywords.some(keyword => s.toLowerCase().includes(keyword)))
      .slice(0, 3)
      .map(s => s.trim());
  }

  // D√©terminer l'agent de transfert
  private determineHandoff(agentName: AgentType, content: string): AgentType | undefined {
    // Logique de transfert bas√©e sur le contenu
    if (content.includes('document') && agentName !== 'DocuGen') return 'DocuGen';
    if (content.includes('formation') && agentName !== 'ALSS') return 'ALSS';
    if (content.includes('surveillance') && agentName !== 'Sentinelle') return 'Sentinelle';
    
    return undefined;
  }

  // Logger l'ex√©cution pour audit
  private async logAgentExecution(
    response: AgentResponse,
    scenario: any,
    context: OrchestrationContext
  ): Promise<void> {
    // Utiliser le syst√®me de logging existant
    const logData = {
      agent_name: response.agentName,
      user_message: `Sc√©nario ${scenario.id}: ${scenario.title}`,
      agent_response: response.content,
      context_data: {
        scenarioId: scenario.id,
        confidence: response.confidence,
        userId: context.userId,
        orchestrationPrompt: scenario.orchestration_prompt
      }
    };

    // Enregistrement via syst√®me existant
    console.log('üìä Audit Agent:', logData);
  }
}

// Instance globale de l'orchestrateur
export const agentOrchestrator = new AgentOrchestrator();

// Fonction utilitaire pour ex√©cution rapide
export async function executeAgentScenario(
  scenarioId: number,
  userContext: string,
  userId: string = 'demo-user'
): Promise<AgentResponse[]> {
  return agentOrchestrator.executeOrchestrationScenario(scenarioId, {
    scenarioId,
    userContext,
    userId
  });
}

// Hook React pour l'orchestration
export function useAgentOrchestration() {
  const [isExecuting, setIsExecuting] = useState(false);
  const [results, setResults] = useState<AgentResponse[]>([]);

  const executeScenario = async (scenarioId: number, context: string) => {
    setIsExecuting(true);
    try {
      const responses = await executeAgentScenario(scenarioId, context);
      setResults(responses);
      return responses;
    } finally {
      setIsExecuting(false);
    }
  };

  return { executeScenario, isExecuting, results };
}