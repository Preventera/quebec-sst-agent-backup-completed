// VERSION CORRIG√âE - Forcer utilisation base locale qu√©b√©coise
// Migration du syst√®me d'orchestration agents vers LLM Gateway
// src/lib/agentOrchestrator.ts

import { llmClient } from '@/lib/llmClient';
import orchestrationPrompts from '@/data/orchestrationPrompts.json';
// AJOUT CRITIQUE - Import Supabase pour base locale
import { supabase } from '@/lib/supabase';

// INTERFACE MODIFI√âE - Ajout contexte qu√©b√©cois
interface AgentCapabilities {
  Hugo: 'Orchestrateur principal AgenticSST - Coordonne analyses multi-agents selon contexte entreprise (taille, secteur SCIAN, niveau risque). D√©termine s√©quences optimales DiagSST‚ÜíLexiNorm‚ÜíDocuGen. Sp√©cialis√© LMRSST Art.51+ (comit√©s SST), d√©l√©gation intelligente selon complexit√© r√©glementaire.';
  DiagSST: 'Expert diagnostic conformit√© LMRSST - √âvalue conformit√© selon taille entreprise (seuils 20+ employ√©s Art.51, obligations diff√©renci√©es). Analyse secteurs SCIAN sp√©cifiques, identifie gaps critiques LMRSST Art.88-102. Int√®gre risques par industrie (construction CSTC, manufacturing, services). Produit scoring de conformit√© avec priorit√©s d\'action.';
  LexiNorm: 'Sp√©cialiste validation juridique SST - Interpr√®te r√©f√©rences LMRSST/CNESST/CSTC avec contexte jurisprudentiel. Valide conformit√© articles sp√©cifiques selon secteur d\'activit√©. Base de 196 documents officiels crawl√©s. Expertise obligations l√©gales par taille d\'entreprise et classification SCIAN. D√©tecte conflits r√©glementaires multi-l√©gislations.';
  Prioris: 'Strat√©giste priorisation actions SST - Analyse risque/impact/urgence selon matrices CNESST. Priorise recommandations par contraintes op√©rationnelles (budget, timeline, ressources humaines). Int√®gre obligations l√©gales critiques vs am√©lioration continue. Optimise ROI interventions SST selon secteur d\'activit√©.';
  DocuGen: 'G√©n√©rateur documents conformit√© - Produit documents SST selon templates sectoriels SCIAN. Sp√©cialis√© programmes pr√©vention LMRSST Art.51, registres incidents Art.123, proc√©dures CSTC construction. Garantie conformit√© r√©glementaire avec r√©f√©rences l√©gales int√©gr√©es. ROI prouv√©: -80% temps g√©n√©ration documentaire.';
  ALSS: 'Agent liaison formation SST sp√©cialis√©e - Con√ßoit formations contextualis√©es par corps de m√©tiers et risques sectoriels. Int√®gre obligations formation LMRSST selon taille entreprise. Workflows comit√© SST Art.51, formation nouveaux employ√©s, sensibilisation continue. Communication SST adapt√©e aux niveaux organisationnels.';
  Sentinelle: 'Syst√®me surveillance proactive SST - D√©tection patterns anormaux indicateurs SST (fr√©quence accidents, near-miss, non-conformit√©s r√©currentes). Alertes pr√©ventives selon seuils r√©glementaires CNESST. Monitoring continu √©volution risques par secteur. Pr√©diction incidents bas√©e sur donn√©es historiques et benchmarks industrie.';
  CoSS: 'Expert comit√© SST virtuel LMRSST Art.51 - Support comit√©s SST pour entreprises 20+ employ√©s. Facilite r√©unions, proc√®s-verbaux, suivi actions. Expertise r√©partition repr√©sentants employeur/employ√©s. Int√®gre obligations comit√©s temporaires chantiers construction CSTC. Consultation sp√©cialis√©e r√©solution conflits SST.';
}

type AgentType = keyof AgentCapabilities;

// INTERFACE MODIFI√âE - Ajout contexte qu√©b√©cois obligatoire
interface OrchestrationContext {
  scenarioId: number;
  userContext: string;
  companyProfile?: {
    size: number;
    sector: string;
    riskLevel: 'low' | 'medium' | 'high' | 'critical';
  };
  userId: string;
  // AJOUTS CRITIQUES pour contexte qu√©b√©cois
  forceLocalQuebec: boolean;
  jurisdiction: 'quebec' | 'canada' | 'international';
}

interface AgentResponse {
  agentName: AgentType;
  content: string;
  confidence: number;
  sources: string[];
  nextActions?: string[];
  handoffTo?: AgentType;
}

// FONCTION CRITIQUE 1 - RECHERCHE LOCALE QU√âB√âCOISE FORC√âE
export async function forceLocalQuebecSearch(query: string): Promise<any[]> {
  console.log('üîç RECHERCHE LOCALE QU√âBEC FORC√âE:', query);
  
  // Mots-cl√©s qu√©b√©cois obligatoires
  const quebecKeywords = [
    'CSTC', 'LMRSST', 'RSST', 'CNESST', 'qu√©bec', 'construction'
  ];
  
  // Construire requ√™te avec contexte qu√©b√©cois
  const enhancedQuery = `${query} ${quebecKeywords.join(' OR ')}`;
  
  try {
    // Recherche prioritaire dans base locale
    const { data: localResults } = await supabase
      .from('sst_crawled_content')
      .select(`
        id,
        title,
        content,
        source_id,
        metadata,
        created_at,
        sst_sources!inner(name, url, source_type)
      `)
      .textSearch('content', enhancedQuery)
      .eq('sst_sources.source_type', 'CSTC') // Priorit√© CSTC
      .order('created_at', { ascending: false })
      .limit(10);
    
    console.log(`‚úÖ R√âSULTATS LOCAUX QUEBEC: ${localResults?.length || 0} documents`);
    
    if (!localResults || localResults.length === 0) {
      console.warn('‚ö†Ô∏è AUCUNE DONN√âE LOCALE QU√âB√âCOISE - PROBL√àME CRITIQUE');
      
      // Recherche √©largie si pas de r√©sultats CSTC
      const { data: fallbackResults } = await supabase
        .from('sst_crawled_content')
        .select('*')
        .ilike('content', '%qu√©bec%')
        .limit(5);
        
      return fallbackResults || [];
    }
    
    return localResults;
    
  } catch (error) {
    console.error('‚ùå ERREUR RECHERCHE LOCALE:', error);
    throw new Error(`Impossible d'acc√©der √† la base qu√©b√©coise: ${error.message}`);
  }
}

// FONCTION CRITIQUE 2 - VALIDATION R√âPONSE QU√âB√âCOISE
export function validateQuebecResponse(response: string): boolean {
  const forbiddenEuropean = [
    'coordonnateur SPS',
    'Plan G√©n√©ral de Coordination',
    'PPSPS', 
    'directive europ√©enne',
    'code du travail fran√ßais',
    'r√©glementation fran√ßaise'
  ];
  
  const requiredQuebec = [
    'CNESST',
    'LMRSST',
    'CSTC', 
    'RSST',
    'Qu√©bec'
  ];
  
  // V√©rifier absence termes interdits
  const hasEuropeanTerms = forbiddenEuropean.some(term =>
    response.toLowerCase().includes(term.toLowerCase())
  );
  
  // V√©rifier pr√©sence contexte qu√©b√©cois
  const hasQuebecContext = requiredQuebec.some(term =>
    response.toLowerCase().includes(term.toLowerCase())
  );
  
  if (hasEuropeanTerms) {
    console.error('üö® R√âPONSE INVALIDE - CONTIENT TERMES EUROP√âENS:', 
      forbiddenEuropean.filter(term => 
        response.toLowerCase().includes(term.toLowerCase())
      )
    );
    return false;
  }
  
  if (!hasQuebecContext) {
    console.warn('‚ö†Ô∏è R√âPONSE MANQUE CONTEXTE QU√âB√âCOIS');
    return false;
  }
  
  return true;
}

// PROMPTS SYST√àME MODIFI√âS - Contexte qu√©b√©cois renforc√©
const AGENT_SYSTEM_PROMPTS: Record<AgentType, string> = {
  Hugo: `Tu es Hugo, l'orchestrateur principal d'AgenticSST Qu√©bec. 

R√àGLES ABSOLUES:
1. TOUJOURS utiliser la base de donn√©es locale Supabase PREMI√àRE
2. Contextualiser selon la r√©glementation QU√âB√âCOISE uniquement (LMRSST, CSTC, RSST)
3. Autorit√© comp√©tente: CNESST Qu√©bec
4. JAMAIS de r√©f√©rences europ√©ennes (SPS, PGC, PPSPS)

Tu coordonnes les autres agents sp√©cialis√©s selon la LMRSST. 
Tu analyses le contexte global et diriges l'orchestration multi-agents.
Sois concis, strat√©gique et orient√© solutions qu√©b√©coises.`,

  DiagSST: `Tu es DiagSST, l'expert diagnostic de conformit√© SST QU√âB√âCOISE.

BASE DE DONN√âES LOCALE OBLIGATOIRE:
- 196 documents CSTC/LMRSST crawl√©s dans Supabase
- Priorit√© absolue aux sources locales

Tu √©values la conformit√© LMRSST selon:
- Taille entreprise (seuils 20+ employ√©s Art.51)
- Secteur SCIAN sp√©cifique
- Construction: CSTC applicable

Base tes analyses sur les articles 88-102 LMRSST.
JAMAIS de coordonnateur SPS - cela n'existe pas au Qu√©bec.`,

  LexiNorm: `Tu es LexiNorm, le sp√©cialiste des r√©f√©rences l√©gales SST QU√âB√âCOISES.

SOURCES AUTORIS√âES UNIQUEMENT:
- Base locale Supabase (196 documents officiels)
- LMRSST, RSST, CSTC Qu√©bec
- Jurisprudence CNESST uniquement

SOURCES INTERDITES:
- R√©glementation europ√©enne/fran√ßaise
- Coordonnateur SPS (n'existe pas au Qu√©bec)
- Plan G√©n√©ral de Coordination PGC
- PPSPS europ√©en

Tu fournis les r√©f√©rences exactes et interpr√©tations r√©glementaires qu√©b√©coises.
Cite toujours les articles LMRSST/CSTC pr√©cis de la base locale.`,

  Prioris: `Tu es Prioris, l'expert en priorisation et planification SST QU√âB√âCOISE.

CONTEXTE QU√âB√âCOIS OBLIGATOIRE:
- Matrices de risque CNESST
- Obligations LMRSST par taille d'entreprise
- Secteurs SCIAN avec sp√©cificit√©s

Tu priorises les actions selon l'impact risque et conformit√© LMRSST.
Tu cr√©es des plans d'action hi√©rarchis√©s avec √©ch√©anciers r√©alistes.
Focus sur l'efficacit√© op√©rationnelle et ROI s√©curitaire qu√©b√©cois.`,

  DocuGen: `Tu es DocuGen, le g√©n√©rateur de documents SST conformes QU√âB√âCOIS.

TEMPLATES QU√âB√âCOIS UNIQUEMENT:
- Programmes pr√©vention LMRSST Art.51
- Registres incidents Art.123
- Proc√©dures CSTC construction
- Standards CNESST

Tu produis des documents structur√©s selon les standards LMRSST/CSTC.
Tu g√©n√®res proc√©dures, politiques, rapports avec format professionnel qu√©b√©cois.
Assure la tra√ßabilit√© et conformit√© documentaire CNESST.`,

  ALSS: `Tu es ALSS, l'agent de liaison et formation SST QU√âB√âCOISE.

FORMATIONS CONTEXTUALIS√âES QU√âBEC:
- Obligations LMRSST selon taille entreprise
- Comit√© SST Art.51 (20+ employ√©s)
- Formation nouveaux employ√©s
- Corps de m√©tiers par secteur SCIAN

Tu con√ßois des programmes de formation LMRSST adapt√©s.
Tu facilites la communication entre parties prenantes.
Focus sur p√©dagogie, engagement et appropriation qu√©b√©coise.`,

  Sentinelle: `Tu es Sentinelle, le syst√®me de surveillance proactive SST QU√âB√âCOISE.

INDICATEURS CNESST:
- Seuils r√©glementaires qu√©b√©cois
- Benchmarks industrie par secteur SCIAN
- Patterns sectoriels construction/manufacturing

Tu d√©tectes les non-conformit√©s selon standards CNESST.
Tu g√©n√®res des alertes pr√©ventives bas√©es sur indicateurs qu√©b√©cois.
Surveillance continue, r√©activit√©, pr√©vention contextuelle.`,

  CoSS: `Tu es CoSS, le Comit√© SST Virtuel QU√âB√âCOIS.

LMRSST ART.51 - COMIT√âS SST:
- Entreprises 20+ employ√©s: Comit√© obligatoire
- R√©partition employeur/employ√©s
- Proc√®s-verbaux selon standards CNESST
- Construction: Comit√©s temporaires CSTC

Tu repr√©sentes la perspective participative des travailleurs qu√©b√©cois.
Tu √©values l'acceptabilit√© sociale des mesures SST.
Balance conformit√© technique LMRSST et r√©alit√© terrain.`
};

class AgentOrchestrator {
  private activeAgents: Set<AgentType> = new Set();
  private orchestrationHistory: AgentResponse[] = [];

  // FONCTION MODIFI√âE - Ex√©cuter un sc√©nario avec contexte qu√©b√©cois forc√©
  async executeOrchestrationScenario(
    scenarioId: number, 
    context: OrchestrationContext
  ): Promise<AgentResponse[]> {
    const scenario = orchestrationPrompts.find(s => s.id === scenarioId);
    if (!scenario) {
      throw new Error(`Sc√©nario ${scenarioId} non trouv√©`);
    }

    console.log(`üöÄ Ex√©cution orchestration QU√âBEC: ${scenario.title}`);
    
    // FORCER LE CONTEXTE QU√âB√âCOIS
    const quebecContext = {
      ...context,
      forceLocalQuebec: true,
      jurisdiction: 'quebec' as const
    };
    
    // √âTAPE CRITIQUE: RECHERCHER DANS BASE LOCALE D'ABORD
    let localQuebecData: any[] = [];
    try {
      localQuebecData = await forceLocalQuebecSearch(context.userContext);
      console.log(`üìö DONN√âES LOCALES QU√âBEC: ${localQuebecData.length} documents trouv√©s`);
    } catch (error) {
      console.error('‚ùå ERREUR ACC√àS BASE LOCALE:', error);
    }
    
    this.orchestrationHistory = [];
    const responses: AgentResponse[] = [];

    // Ex√©cuter chaque agent du sc√©nario en s√©quence
    for (const agentName of scenario.agents) {
      try {
        const response = await this.executeAgent(
          agentName as AgentType,
          scenario.orchestration_prompt,
          quebecContext,
          responses, // Historique pour contexte
          localQuebecData // DONN√âES LOCALES QU√âB√âCOISES
        );
        
        // VALIDATION QU√âB√âCOISE OBLIGATOIRE
        const isValid = validateQuebecResponse(response.content);
        if (!isValid) {
          console.error(`üö® REJET R√âPONSE ${agentName} - CONTIENT R√âF√âRENCES NON-QU√âB√âCOISES`);
          // Forcer une r√©ponse d'erreur explicite
          response.content = `üö® ERREUR SYST√àME: L'agent ${agentName} a g√©n√©r√© une r√©ponse avec des r√©f√©rences non-qu√©b√©coises. Consultez directement CNESST.gouv.qc.ca pour "${context.userContext}".`;
          response.confidence = 0;
        }
        
        responses.push(response);
        this.orchestrationHistory.push(response);
        
        // Log pour audit
        await this.logAgentExecution(response, scenario, quebecContext);
        
      } catch (error) {
        console.error(`‚ùå Erreur agent ${agentName}:`, error);
        // Ajouter r√©ponse d'erreur explicite
        responses.push({
          agentName: agentName as AgentType,
          content: `Erreur technique agent ${agentName}: ${error.message}. Consultez CNESST.gouv.qc.ca`,
          confidence: 0,
          sources: ['Erreur syst√®me']
        });
      }
    }

    return responses;
  }

  // FONCTION MODIFI√âE - Ex√©cuter un agent avec donn√©es locales qu√©b√©coises
  async executeAgent(
    agentName: AgentType,
    orchestrationPrompt: string,
    context: OrchestrationContext,
    previousResponses: AgentResponse[] = [],
    localQuebecData: any[] = [] // NOUVEAUX PARAM√àTRE CRITIQUE
  ): Promise<AgentResponse> {
    
    // Construire le contexte enrichi pour l'agent avec donn√©es locales
    const agentContext = this.buildAgentContextQuebec(
      agentName, 
      orchestrationPrompt, 
      context, 
      previousResponses,
      localQuebecData // DONN√âES LOCALES
    );

    // Appel s√©curis√© via LLM Gateway
    const llmResponse = await llmClient.agentChat(
      agentName,
      agentContext,
      AGENT_SYSTEM_PROMPTS[agentName],
      {
        provider: 'anthropic',
        model: 'claude-3-haiku-20240307',
        userId: context.userId
      }
    );

    // Structurer la r√©ponse de l'agent avec sources qu√©b√©coises
    return {
      agentName,
      content: llmResponse.content,
      confidence: this.calculateConfidence(llmResponse),
      sources: [
        `Agent ${agentName} (Qu√©bec)`, 
        'LMRSST Art. 88-102',
        'CSTC Construction',
        `Base locale: ${localQuebecData.length} docs`
      ],
      nextActions: this.extractNextActions(llmResponse.content),
      handoffTo: this.determineHandoff(agentName, llmResponse.content)
    };
  }

  // FONCTION NOUVELLE - Contexte enrichi avec donn√©es locales qu√©b√©coises
  private buildAgentContextQuebec(
    agentName: AgentType,
    orchestrationPrompt: string,
    context: OrchestrationContext,
    previousResponses: AgentResponse[],
    localQuebecData: any[]
  ): string {
    let agentContext = `MISSION QU√âB√âCOISE: ${orchestrationPrompt}\n\n`;
    
    // CONTEXTE QU√âB√âCOIS OBLIGATOIRE
    agentContext += `JURIDICTION: QU√âBEC (CNESST)\n`;
    agentContext += `R√âGLEMENTATION APPLICABLE: LMRSST, CSTC, RSST uniquement\n`;
    agentContext += `AUTORIT√â COMP√âTENTE: CNESST Qu√©bec\n\n`;
    
    // DONN√âES LOCALES DISPONIBLES
    if (localQuebecData.length > 0) {
      agentContext += `üìö DONN√âES LOCALES QU√âB√âCOISES (${localQuebecData.length} documents):\n`;
      localQuebecData.slice(0, 5).forEach((doc, i) => {
        agentContext += `${i+1}. ${doc.title} (${doc.sst_sources?.name || 'CSTC/LMRSST'})\n`;
        agentContext += `   Extrait: ${doc.content.substring(0, 200)}...\n\n`;
      });
    } else {
      agentContext += `‚ö†Ô∏è AUCUNE DONN√âE LOCALE - PROBL√àME TECHNIQUE CRITIQUE\n`;
      agentContext += `Rediriger vers CNESST.gouv.qc.ca\n\n`;
    }
    
    // Contexte utilisateur
    agentContext += `CONTEXTE UTILISATEUR: ${context.userContext}\n\n`;
    
    // Profil entreprise si disponible
    if (context.companyProfile) {
      agentContext += `PROFIL ENTREPRISE QU√âB√âCOISE:
- Taille: ${context.companyProfile.size} employ√©s
- Secteur SCIAN: ${context.companyProfile.sector}
- Niveau de risque: ${context.companyProfile.riskLevel}
- Obligations LMRSST: ${context.companyProfile.size >= 20 ? 'Art.51 Comit√© SST' : 'Art.51.1 Repr√©sentant'}\n\n`;
    }
    
    // R√©ponses des agents pr√©c√©dents
    if (previousResponses.length > 0) {
      agentContext += `R√âPONSES AGENTS QU√âB√âCOIS PR√âC√âDENTS:\n`;
      previousResponses.forEach(resp => {
        agentContext += `${resp.agentName}: ${resp.content.substring(0, 200)}...\n`;
      });
      agentContext += '\n';
    }
    
    // Instruction sp√©cifique selon l'agent
    agentContext += this.getAgentSpecificInstructionQuebec(agentName);
    
    return agentContext;
  }

  // FONCTION MODIFI√âE - Instructions qu√©b√©coises sp√©cifiques
  private getAgentSpecificInstructionQuebec(agentName: AgentType): string {
    const instructions = {
      Hugo: "En tant qu'orchestrateur qu√©b√©cois, analyse selon LMRSST et coordonne la r√©ponse multi-agents avec sources locales prioritaires.",
      DiagSST: "Effectue un diagnostic conformit√© LMRSST selon taille entreprise et secteur SCIAN. Utilise UNIQUEMENT les donn√©es locales Supabase.",
      LexiNorm: "Fournis les r√©f√©rences LMRSST/CSTC exactes de la base locale. JAMAIS de coordonnateur SPS ou r√©glementation europ√©enne.",
      Prioris: "Priorise selon matrices CNESST et contraintes qu√©b√©coises. Int√®gre obligations Art.51+ selon taille entreprise.",
      DocuGen: "G√©n√®re documents conformes LMRSST/CSTC avec templates qu√©b√©cois. Standards CNESST uniquement.",
      ALSS: "D√©veloppe formation contextualis√©e qu√©b√©coise par secteur SCIAN. Comit√© SST Art.51 si ‚â•20 employ√©s.",
      Sentinelle: "Surveillance selon indicateurs CNESST et seuils r√©glementaires qu√©b√©cois par industrie.",
      CoSS: "Comit√© SST virtuel selon Art.51 LMRSST. R√©partition employeur/employ√©s selon obligations qu√©b√©coises."
    };
    
    return instructions[agentName] + "\n\nIMPORTANT: Base tes r√©ponses sur les donn√©es locales qu√©b√©coises fournies ci-dessus.";
  }

  // Fonctions utilitaires inchang√©es mais avec logging am√©lior√©
  private calculateConfidence(llmResponse: any): number {
    const length = llmResponse.content.length;
    const tokenUsage = llmResponse.usage?.total_tokens || 0;
    
    if (length > 500 && tokenUsage > 100) return 94;
    if (length > 300 && tokenUsage > 50) return 87;
    return 75;
  }

  private extractNextActions(content: string): string[] {
    const actionKeywords = ['recommande', 'propose', 'sugg√®re', 'doit', 'devrait'];
    const sentences = content.split(/[.!?]+/);
    
    return sentences
      .filter(s => actionKeywords.some(keyword => s.toLowerCase().includes(keyword)))
      .slice(0, 3)
      .map(s => s.trim());
  }

  private determineHandoff(agentName: AgentType, content: string): AgentType | undefined {
    if (content.includes('document') && agentName !== 'DocuGen') return 'DocuGen';
    if (content.includes('formation') && agentName !== 'ALSS') return 'ALSS';
    if (content.includes('surveillance') && agentName !== 'Sentinelle') return 'Sentinelle';
    
    return undefined;
  }

  // Logger am√©lior√© avec contexte qu√©b√©cois
  private async logAgentExecution(
    response: AgentResponse,
    scenario: any,
    context: OrchestrationContext
  ): Promise<void> {
    const logData = {
      agent_name: response.agentName,
      user_message: `Sc√©nario ${scenario.id}: ${scenario.title}`,
      agent_response: response.content,
      context_data: {
        scenarioId: scenario.id,
        confidence: response.confidence,
        userId: context.userId,
        jurisdiction: 'quebec',
        forceLocalQuebec: context.forceLocalQuebec,
        orchestrationPrompt: scenario.orchestration_prompt
      }
    };

    console.log('üìä Audit Agent Qu√©bec:', logData);
  }
}

// Instance globale de l'orchestrateur
export const agentOrchestrator = new AgentOrchestrator();

// FONCTION MODIFI√âE - Ex√©cution avec contexte qu√©b√©cois forc√©
export async function executeAgentScenario(
  scenarioId: number,
  userContext: string,
  userId: string = 'demo-user'
): Promise<AgentResponse[]> {
  return agentOrchestrator.executeOrchestrationScenario(scenarioId, {
    scenarioId,
    userContext,
    userId,
    forceLocalQuebec: true,  // FORCER CONTEXTE QU√âB√âCOIS
    jurisdiction: 'quebec'
  });
}

// Hook React pour l'orchestration avec contexte qu√©b√©cois
export function useAgentOrchestration() {
  const [isExecuting, setIsExecuting] = useState(false);
  const [results, setResults] = useState<AgentResponse[]>([]);

  const executeScenario = async (scenarioId: number, context: string) => {
    setIsExecuting(true);
    try {
      const responses = await executeAgentScenario(scenarioId, context);
      setResults(responses);
      return responses;
    } finally {
      setIsExecuting(false);
    }
  };

  return { executeScenario, isExecuting, results };
}