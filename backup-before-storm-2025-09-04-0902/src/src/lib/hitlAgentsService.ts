// src/lib/hitlAgentsService.ts
// Service HITL sp√©cialis√© pour les agents AgenticSST Qu√©bec

import { useHITLAudit } from '@/lib/hitlService';

type AgentType = 'Hugo' | 'DiagSST' | 'LexiNorm' | 'Prioris' | 'ALSS' | 'Sentinelle' | 'CoSS' | 'DocuGen';

interface AgentContext {
  agentName: AgentType;
  action: string;
  companyProfile?: {
    name: string;
    size: number;
    sector: string;
    riskLevel?: string;
  };
  scenario?: string;
  criticalityLevel: 'low' | 'medium' | 'high' | 'critical';
  legalBasis: string[];
  expectedOutputs: string[];
}

interface HITLValidationResult {
  approved: boolean;
  justification?: string;
  timestamp: string;
  userId?: string;
}

// Messages HITL contextuels par agent
const AGENT_HITL_MESSAGES: Record<AgentType, (context: AgentContext) => string> = {
  Hugo: (ctx) => `üéØ VALIDATION HITL - ORCHESTRATEUR HUGO

Action: ${ctx.action}
Sc√©nario: ${ctx.scenario}
Entreprise: ${ctx.companyProfile?.name} (${ctx.companyProfile?.size} employ√©s)
Secteur: ${ctx.companyProfile?.sector}

Agents mobilis√©s: ${ctx.expectedOutputs.join(' ‚Üí ')}
Base l√©gale: ${ctx.legalBasis.join(', ')}

‚ö†Ô∏è Hugo va coordonner une orchestration multi-agents selon la LMRSST.
Cette action aura un impact sur la conformit√© r√©glementaire de l'entreprise.

Approuvez-vous cette orchestration ?`,

  DiagSST: (ctx) => `üîç VALIDATION HITL - DIAGNOSTIC CONFORMIT√â

Agent: DiagSST (Diagnostic LMRSST)
Action: ${ctx.action}
Entreprise: ${ctx.companyProfile?.name}
Niveau de risque: ${ctx.companyProfile?.riskLevel || 'Non √©valu√©'}

Articles LMRSST analys√©s: ${ctx.legalBasis.join(', ')}
Livrables attendus: ${ctx.expectedOutputs.join(', ')}

‚ö†Ô∏è DiagSST va analyser la conformit√© et identifier les lacunes selon la LMRSST.
Cette √©valuation peut r√©v√©ler des non-conformit√©s critiques.

Approuvez-vous ce diagnostic de conformit√© ?`,

  LexiNorm: (ctx) => `üìö VALIDATION HITL - R√âF√âRENCES L√âGALES

Agent: LexiNorm (Expert LMRSST/RSST)
Action: ${ctx.action}
R√©f√©rences demand√©es: ${ctx.legalBasis.join(', ')}

Analyse r√©glementaire: ${ctx.expectedOutputs.join(', ')}
Niveau de criticit√©: ${ctx.criticalityLevel.toUpperCase()}

‚ö†Ô∏è LexiNorm va fournir l'interpr√©tation officielle de la r√©glementation SST.
Ces r√©f√©rences auront valeur l√©gale pour les d√©cisions de l'entreprise.

Approuvez-vous cette analyse r√©glementaire ?`,

  Prioris: (ctx) => `üìä VALIDATION HITL - PRIORISATION ACTIONS

Agent: Prioris (Planification SST)
Action: ${ctx.action}
Contexte: ${ctx.scenario}

Actions √† prioriser: ${ctx.expectedOutputs.join(', ')}
Base LMRSST: ${ctx.legalBasis.join(', ')}

‚ö†Ô∏è Prioris va √©tablir un plan d'action hi√©rarchis√© avec √©ch√©anciers.
Cette priorisation guidera les investissements SST de l'entreprise.

Approuvez-vous cette planification ?`,

  ALSS: (ctx) => `üéì VALIDATION HITL - FORMATION LIAISON SST

Agent: ALSS (Apprentissage & Liaison)
Action: ${ctx.action}
Public cible: ${ctx.companyProfile?.size} employ√©s - ${ctx.companyProfile?.sector}

Programme formation: ${ctx.expectedOutputs.join(', ')}
Conformit√© LMRSST: ${ctx.legalBasis.join(', ')}

‚ö†Ô∏è ALSS va concevoir un programme de formation adapt√© √† la LMRSST.
Cette formation engagera la responsabilit√© de l'employeur.

Approuvez-vous ce programme de formation ?`,

  Sentinelle: (ctx) => `üõ°Ô∏è VALIDATION HITL - SURVEILLANCE PROACTIVE

Agent: Sentinelle (Monitoring SST)
Action: ${ctx.action}
Surveillance: ${ctx.scenario}

Indicateurs surveill√©s: ${ctx.expectedOutputs.join(', ')}
Seuils LMRSST: ${ctx.legalBasis.join(', ')}

‚ö†Ô∏è Sentinelle va activer une surveillance continue avec alertes.
Ce monitoring peut d√©clencher des actions correctives imm√©diates.

Approuvez-vous cette surveillance ?`,

  CoSS: (ctx) => `üë• VALIDATION HITL - COMIT√â SST VIRTUEL

Agent: CoSS (Comit√© de Sant√© S√©curit√©)
Action: ${ctx.action}
Consultation: ${ctx.scenario}

D√©lib√©ration: ${ctx.expectedOutputs.join(', ')}
Articles LMRSST: ${ctx.legalBasis.join(', ')}

‚ö†Ô∏è CoSS va simuler une consultation de comit√© SST selon l'art. 88-91 LMRSST.
Cette consultation aura valeur de recommandation officielle.

Approuvez-vous cette consultation de comit√© ?`,

  DocuGen: (ctx) => `üìÑ VALIDATION HITL - G√âN√âRATION DOCUMENTAIRE

Agent: DocuGen (Documentation SST)
Action: ${ctx.action}
Documents: ${ctx.expectedOutputs.join(', ')}

Base l√©gale: ${ctx.legalBasis.join(', ')}
Entreprise: ${ctx.companyProfile?.name}

‚ö†Ô∏è DocuGen va cr√©er des documents l√©galement contraignants selon la LMRSST.
Ces documents engageront la responsabilit√© de l'employeur.

Approuvez-vous cette g√©n√©ration documentaire ?`
};

class HITLAgentsService {
  private readonly auditService = useHITLAudit();

  /**
   * Validation HITL contextuelle pour un agent sp√©cifique
   */
  async validateAgentAction(context: AgentContext): Promise<HITLValidationResult> {
    const message = AGENT_HITL_MESSAGES[context.agentName](context);
    
    const userConfirm = window.confirm(message);
    
    const result: HITLValidationResult = {
      approved: userConfirm,
      justification: userConfirm 
        ? `Agent ${context.agentName} approuv√© pour: ${context.action}`
        : `Agent ${context.agentName} rejet√© pour: ${context.action}`,
      timestamp: new Date().toISOString(),
      userId: 'current-user' // Remplacer par l'ID utilisateur r√©el
    };

    // Audit centralis√©
    await this.auditService.logWorkflowOrchestration(
      `${context.agentName}: ${context.action}`,
      [context.agentName],
      context.criticalityLevel,
      result.approved ? 'approved' : 'rejected',
      result.justification
    );

    return result;
  }

  /**
   * Validation HITL pour orchestration multi-agents
   */
  async validateOrchestration(
    scenario: string,
    agents: AgentType[],
    companyProfile: any,
    criticalityLevel: 'low' | 'medium' | 'high' | 'critical'
  ): Promise<HITLValidationResult> {
    const message = `üéØ VALIDATION HITL - ORCHESTRATION MULTI-AGENTS

Sc√©nario: ${scenario}
Agents mobilis√©s: ${agents.join(' ‚Üí ')}
Entreprise: ${companyProfile?.name} (${companyProfile?.size} employ√©s)
Secteur: ${companyProfile?.sector}
Criticit√©: ${criticalityLevel.toUpperCase()}

‚ö†Ô∏è Cette orchestration va mobiliser plusieurs agents sp√©cialis√©s SST.
L'impact sur la conformit√© LMRSST sera significatif.

Approuvez-vous cette orchestration multi-agents ?`;

    const userConfirm = window.confirm(message);
    
    const result: HITLValidationResult = {
      approved: userConfirm,
      justification: userConfirm 
        ? `Orchestration approuv√©e: ${agents.join(', ')}`
        : `Orchestration rejet√©e: ${agents.join(', ')}`,
      timestamp: new Date().toISOString()
    };

    // Audit centralis√© pour orchestration
    await this.auditService.logWorkflowOrchestration(
      scenario,
      agents,
      criticalityLevel,
      result.approved ? 'approved' : 'rejected',
      result.justification
    );

    return result;
  }
}

// Hook React pour utilisation dans les composants
export const useHITLAgents = () => {
  const service = new HITLAgentsService();
  
  return {
    validateAgentAction: service.validateAgentAction.bind(service),
    validateOrchestration: service.validateOrchestration.bind(service)
  };
};

export default HITLAgentsService;